 -- Comenzamos creando las tablas base

-- Tabla de roles
CREATE TABLE public.roles (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR NOT NULL,
    descripcion TEXT,
    creado_en TIMESTAMP DEFAULT NOW(),
    modificado_en TIMESTAMP
);

-- Insertar roles básicos
INSERT INTO public.roles (nombre, descripcion) VALUES 
    ('Gerente', 'Acceso completo al sistema'),
    ('Administrador', 'Acceso a gestión de datos pero no de usuarios'),
    ('Cliente', 'Acceso limitado a sus propias sierras y afilados');

-- Tabla de empresas
CREATE TABLE public.empresas (
    id SERIAL PRIMARY KEY,
    razon_social VARCHAR NOT NULL,
    rut VARCHAR NOT NULL,
    direccion TEXT,
    telefono VARCHAR,
    email VARCHAR,
    activo BOOLEAN DEFAULT TRUE,
    creado_en TIMESTAMP DEFAULT NOW(),
    modificado_en TIMESTAMP
);

-- Tabla de usuarios (enfoque híbrido)
CREATE TABLE public.usuarios (
    id UUID PRIMARY KEY REFERENCES auth.users(id),
    email VARCHAR NOT NULL,
    nombre_completo VARCHAR,
    rol_id INTEGER REFERENCES public.roles(id),
    empresa_id INTEGER REFERENCES public.empresas(id),
    activo BOOLEAN DEFAULT TRUE,
    creado_en TIMESTAMP DEFAULT NOW(),
    modificado_en TIMESTAMP
);

-- Tabla de sucursales
CREATE TABLE public.sucursales (
    id SERIAL PRIMARY KEY,
    empresa_id INTEGER REFERENCES public.empresas(id),
    nombre VARCHAR,
    direccion TEXT,
    telefono VARCHAR,
    activo BOOLEAN DEFAULT TRUE,
    creado_en TIMESTAMP DEFAULT NOW(),
    modificado_en TIMESTAMP
);

-- Tabla de estados de sierra
CREATE TABLE public.estados_sierra (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR NOT NULL,
    descripcion TEXT,
    creado_en TIMESTAMP DEFAULT NOW(),
    modificado_en TIMESTAMP
);

-- Insertar estados básicos
INSERT INTO public.estados_sierra (nombre, descripcion) VALUES 
    ('Disponible', 'Sierra disponible para uso'),
    ('En proceso de afilado', 'Sierra que está actualmente siendo afilada'),
    ('Lista para retiro', 'Sierra afilada y lista para ser retirada'),
    ('Fuera de servicio', 'Sierra dada de baja');

-- Tabla de tipos de sierra
CREATE TABLE public.tipos_sierra (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR NOT NULL,
    descripcion TEXT,
    activo BOOLEAN DEFAULT TRUE,
    creado_en TIMESTAMP DEFAULT NOW(),
    modificado_en TIMESTAMP
);

-- Tabla de sierras
CREATE TABLE public.sierras (
    id SERIAL PRIMARY KEY,
    codigo_barras VARCHAR NOT NULL UNIQUE,
    sucursal_id INTEGER REFERENCES public.sucursales(id),
    tipo_sierra_id INTEGER REFERENCES public.tipos_sierra(id),
    estado_id INTEGER REFERENCES public.estados_sierra(id) DEFAULT 1,
    fecha_registro DATE NOT NULL DEFAULT CURRENT_DATE,
    activo BOOLEAN DEFAULT TRUE,
    creado_en TIMESTAMP DEFAULT NOW(),
    modificado_en TIMESTAMP
);

-- Tabla de tipos de afilado
CREATE TABLE public.tipos_afilado (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR NOT NULL,
    descripcion TEXT,
    creado_en TIMESTAMP DEFAULT NOW(),
    modificado_en TIMESTAMP
);

-- Tabla de afilados
CREATE TABLE public.afilados (
    id SERIAL PRIMARY KEY,
    sierra_id INTEGER REFERENCES public.sierras(id),
    tipo_afilado_id INTEGER REFERENCES public.tipos_afilado(id),
    usuario_id UUID REFERENCES public.usuarios(id),
    fecha_afilado DATE NOT NULL DEFAULT CURRENT_DATE,
    fecha_salida DATE,
    observaciones TEXT,
    creado_en TIMESTAMP DEFAULT NOW(),
    modificado_en TIMESTAMP
);

-- Tabla para salidas masivas
CREATE TABLE public.salidas_masivas (
    id SERIAL PRIMARY KEY,
    usuario_id UUID REFERENCES public.usuarios(id),
    sucursal_id INTEGER REFERENCES public.sucursales(id),
    fecha_salida DATE NOT NULL DEFAULT CURRENT_DATE,
    observaciones TEXT,
    creado_en TIMESTAMP DEFAULT NOW()
);

-- Tabla de relación para salidas masivas
CREATE TABLE public.salida_masiva_afilados (
    id SERIAL PRIMARY KEY,
    salida_masiva_id INTEGER REFERENCES public.salidas_masivas(id),
    afilado_id INTEGER REFERENCES public.afilados(id)
);

-- Tabla para bajas masivas
CREATE TABLE public.bajas_masivas (
    id SERIAL PRIMARY KEY,
    usuario_id UUID REFERENCES public.usuarios(id),
    fecha_baja DATE NOT NULL DEFAULT CURRENT_DATE,
    observaciones TEXT,
    creado_en TIMESTAMP DEFAULT NOW(),
    modificado_en TIMESTAMP
);

-- Tabla de relación para bajas masivas
CREATE TABLE public.baja_masiva_sierras (
    id SERIAL PRIMARY KEY,
    baja_masiva_id INTEGER REFERENCES public.bajas_masivas(id),
    sierra_id INTEGER REFERENCES public.sierras(id),
    estado_anterior BOOLEAN,
    UNIQUE(baja_masiva_id, sierra_id)
);

-- Función para sincronizar usuarios nuevos
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.usuarios (id, email, nombre_completo, rol_id, activo)
  VALUES (new.id, new.email, '', 3, true);
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger para sincronización de usuarios
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Habilitar RLS en todas las tablas
ALTER TABLE public.empresas ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.usuarios ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sucursales ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.estados_sierra ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tipos_sierra ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sierras ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tipos_afilado ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.afilados ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.salidas_masivas ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.salida_masiva_afilados ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.bajas_masivas ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.baja_masiva_sierras ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.roles ENABLE ROW LEVEL SECURITY;

-- Políticas para usuarios
CREATE POLICY "Usuarios sólo pueden ver su propio perfil" ON public.usuarios
    FOR SELECT
    TO public
    USING (id = auth.uid());

CREATE POLICY "Gerentes pueden gestionar usuarios" ON public.usuarios
    FOR ALL
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = 1))
    WITH CHECK (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = 1));

CREATE POLICY "Admins pueden ver todos los usuarios" ON public.usuarios
    FOR SELECT
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = 2));

-- Políticas para empresas
CREATE POLICY "Clientes sólo pueden ver su empresa" ON public.empresas
    FOR SELECT
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.empresa_id = empresas.id));

CREATE POLICY "Gerentes y Admins acceso completo a empresas" ON public.empresas
    FOR ALL
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])))
    WITH CHECK (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])));

-- Políticas para sucursales
CREATE POLICY "Clientes sólo ven sus sucursales" ON public.sucursales
    FOR SELECT
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.empresa_id = sucursales.empresa_id));

CREATE POLICY "Gerentes y Admins acceso completo a sucursales" ON public.sucursales
    FOR ALL
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])))
    WITH CHECK (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])));

-- Políticas para sierras
CREATE POLICY "Clientes sólo ven sus sierras" ON public.sierras
    FOR SELECT
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u
                  JOIN sucursales s ON s.id = sierras.sucursal_id
                  WHERE u.id = auth.uid() AND u.empresa_id = s.empresa_id));

CREATE POLICY "Gerentes y Admins acceso completo a sierras" ON public.sierras
    FOR ALL
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])))
    WITH CHECK (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])));

-- Políticas para afilados
CREATE POLICY "Clientes sólo ven sus afilados" ON public.afilados
    FOR SELECT
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u
                  JOIN sierras s ON s.id = afilados.sierra_id
                  JOIN sucursales su ON su.id = s.sucursal_id
                  WHERE u.id = auth.uid() AND u.empresa_id = su.empresa_id));

CREATE POLICY "Gerentes y Admins pueden acceder a afilados" ON public.afilados
    FOR ALL
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])))
    WITH CHECK (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])));

-- Políticas para salidas masivas
CREATE POLICY "Clientes sólo ven sus salidas masivas" ON public.salidas_masivas
    FOR SELECT
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u
                  JOIN sucursales s ON s.id = salidas_masivas.sucursal_id
                  WHERE u.id = auth.uid() AND u.empresa_id = s.empresa_id));

CREATE POLICY "Gerentes y Admins acceso completo a salidas masivas" ON public.salidas_masivas
    FOR ALL
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])))
    WITH CHECK (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])));

-- Políticas para salida_masiva_afilados
CREATE POLICY "Clientes sólo ven sus detalles de salidas masivas" ON public.salida_masiva_afilados
    FOR SELECT
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u
                  JOIN salidas_masivas sm ON sm.id = salida_masiva_afilados.salida_masiva_id
                  JOIN sucursales s ON s.id = sm.sucursal_id
                  WHERE u.id = auth.uid() AND u.empresa_id = s.empresa_id));

CREATE POLICY "Gerentes y Admins acceso completo a detalles de salidas masivas" ON public.salida_masiva_afilados
    FOR ALL
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])))
    WITH CHECK (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])));

-- Políticas para bajas masivas
CREATE POLICY "Gerentes y Admins acceso completo a bajas_masivas" ON public.bajas_masivas
    FOR ALL
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])))
    WITH CHECK (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])));

-- Políticas para baja_masiva_sierras
CREATE POLICY "Gerentes y Admins acceso completo a baja_masiva_sierras" ON public.baja_masiva_sierras
    FOR ALL
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])))
    WITH CHECK (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])));

CREATE POLICY "Clientes pueden ver sus bajas masivas" ON public.baja_masiva_sierras
    FOR SELECT
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u
                  JOIN bajas_masivas bm ON bm.id = baja_masiva_sierras.baja_masiva_id
                  JOIN sierras s ON s.id = baja_masiva_sierras.sierra_id
                  JOIN sucursales suc ON suc.id = s.sucursal_id
                  WHERE u.id = auth.uid() AND u.empresa_id = suc.empresa_id));

-- Políticas para tablas de catálogo
CREATE POLICY "Todos pueden ver tipos de sierra" ON public.tipos_sierra
    FOR SELECT
    TO public
    USING (true);

CREATE POLICY "Gerentes y Admins pueden modificar tipos de sierra" ON public.tipos_sierra
    FOR ALL
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])))
    WITH CHECK (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])));

CREATE POLICY "Todos pueden ver tipos de afilado" ON public.tipos_afilado
    FOR SELECT
    TO public
    USING (true);

CREATE POLICY "Gerentes y Admins pueden modificar tipos de afilado" ON public.tipos_afilado
    FOR ALL
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])))
    WITH CHECK (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])));

CREATE POLICY "Todos pueden ver estados de sierra" ON public.estados_sierra
    FOR SELECT
    TO public
    USING (true);

CREATE POLICY "Gerentes y Admins pueden modificar estados de sierra" ON public.estados_sierra
    FOR ALL
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])))
    WITH CHECK (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = ANY (ARRAY[1, 2])));

CREATE POLICY "Todos pueden ver roles" ON public.roles
    FOR SELECT
    TO public
    USING (true);

CREATE POLICY "Gerentes pueden modificar roles" ON public.roles
    FOR ALL
    TO public
    USING (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = 1))
    WITH CHECK (EXISTS (SELECT 1 FROM usuarios u WHERE u.id = auth.uid() AND u.rol_id = 1));